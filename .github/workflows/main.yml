name: Release

on:
  issue_comment:
    types: [ created ]

jobs:
  build_and_release:
    name: Build and release
    runs-on: ubuntu-latest
    container: devkitpro/devkita64:latest
    if: contains(github.event.comment.body, '/release-action')

    steps:
      - name: Update packages
        run: |
          sudo -n apt-get update
          sudo -n apt-get upgrade -y git build-essential
          sudo -n apt-get install -y zip python3 python3-pip python3-lz4 cargo maven
          sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.9 1
        shell: bash

      - name: Prepare Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true

      - name: Prepare rust-src
        run: |
          rustup toolchain install nightly
          rustup component add rustfmt --toolchain nightly
          rustup component add rustc-dev-x86_64-unknown-linux-gnu --toolchain nightly
          rustup component add rust-analysis-x86_64-unknown-linux-gnu --toolchain nightly
          rustup component add rust-src
      - name: Prepare cargo-nx
        run: |
          cargo install cargo-nx --git https://github.com/aarch64-switch-rs/cargo-nx
          rustup update
      - name: Setup maven
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Update latest libnx
        run: |
          git config --global --add safe.directory "*"
          git clone --recurse-submodules https://github.com/zdm65477730/libnx.git
          cd libnx
          make install -j$(nproc)
        shell: bash
      - name: Checkout latest code
        uses: actions/checkout@v4.1.1
        with:
          ref: master
          clean: true
          fetch-depth: 0
          fetch-tags: true
          submodules: recursive
      - name: Setup ENV parameters
        run: |
          VER_FILE=overlay/Makefile
          VERSION=v$(awk '/^VER_MAJOR/{print $3}' $VER_FILE).$(awk '/^VER_MINOR/{print $3}' $VER_FILE).$(awk '/^VER_MICRO/{print $3}' $VER_FILE)
          echo "TAG=${VERSION}" >> "${GITHUB_ENV}"
          echo "RELEASE_NAME=emuiibo ${VERSION}" >> "${GITHUB_ENV}"
        shell: bash
      - name: Build
        run: |
          export DEVKITPRO=/opt/devkitpro
          make all
        shell: bash
      - name: Upload Release Asset
        uses: softprops/action-gh-release@v2.0.9
        with:
          name: ${{ env.RELEASE_NAME }}
          tag_name: ${{ env.TAG }}
          draft: false
          prerelease: false
          generate_release_notes: yes
          make_latest: true
          files: |
            ./SdOut/emuiibo.zip
            ./emuiigen/target/emuiigen.jar